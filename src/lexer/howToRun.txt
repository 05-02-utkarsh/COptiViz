

##  Step-by-Step: How to Run the Lexer

###  Prerequisites
Make sure you have the following installed:
- `flex` (for generating the lexer)
- `gcc` (for compiling the C code)

Install them on Ubuntu/Debian if needed:

```bash
sudo apt update
sudo apt install flex gcc
```

---

### Project Structure

```
your-project-folder/
‚îú‚îÄ‚îÄ lexer.l         # The lexer file
‚îú‚îÄ‚îÄ tokens.h        # Token definitions (TOK_INT, etc.)
‚îú‚îÄ‚îÄ Makefile        # Build system
‚îî‚îÄ‚îÄ input.c         # Sample test file
```

---

## üß™ Sample `input.c` (Create this file)


int main() {
    int x = 10;
    float y = 5.5;
    x = x + 1;
    if (x > y) {
        x = x - 1;
    }
    return 0;
}


---

### ‚öôÔ∏è Step-by-Step Commands

#### üîπ 1. Clean and Build the Lexer

```bash
make clean
make
```

This will:
- Run `flex` on `lexer.l` to generate `lexer.c`
- Compile `lexer.c` into an executable called `lexer`

####  2. Run the Lexer on Your Input File

```bash
./lexer < input.c
```

####  3. Sample Output You Should See

```bash
TOK_INT(int)
TOK_IDENTIFIER(main)
TOK_LPAREN(()
TOK_RPAREN())
TOK_LBRACE({)
TOK_INT(int)
TOK_IDENTIFIER(x)
TOK_ASSIGN(=)
TOK_INT_LITERAL(10)
TOK_SEMICOLON(;)
TOK_FLOAT(float)
TOK_IDENTIFIER(y)
TOK_ASSIGN(=)
TOK_FLOAT_LITERAL(5.5)
TOK_SEMICOLON(;)
TOK_CHAR(char)
TOK_IDENTIFIER(c)
TOK_ASSIGN(=)
TOK_IDENTIFIER('A')
TOK_SEMICOLON(;)
TOK_IF(if)
TOK_LPAREN(()
TOK_IDENTIFIER(x)
TOK_GT(>)
TOK_INT_LITERAL(5)
TOK_RPAREN())
TOK_LBRACE({)
TOK_IDENTIFIER(x)
TOK_PLUSEQ(+=)
TOK_INT_LITERAL(2)
TOK_SEMICOLON(;)
TOK_IDENTIFIER(y)
TOK_ASSIGN(=)
TOK_IDENTIFIER(y)
TOK_DIV(/)
TOK_FLOAT_LITERAL(2.0)
TOK_SEMICOLON(;)
TOK_RBRACE(})
TOK_ELSE(else)
TOK_LBRACE({)
TOK_IDENTIFIER(x)
TOK_ASSIGN(=)
TOK_IDENTIFIER(x)
TOK_MINUS(-)
TOK_INT_LITERAL(1)
TOK_SEMICOLON(;)
TOK_RBRACE(})
TOK_FOR(for)
TOK_LPAREN(()
TOK_INT(int)
TOK_IDENTIFIER(i)
TOK_ASSIGN(=)
TOK_INT_LITERAL(0)
TOK_SEMICOLON(;)
TOK_IDENTIFIER(i)
TOK_LT(<)
TOK_INT_LITERAL(10)
TOK_SEMICOLON(;)
TOK_IDENTIFIER(i)
TOK_INC(++)
TOK_RPAREN())
TOK_LBRACE({)
TOK_IDENTIFIER(x)
TOK_ASSIGN(=)
TOK_IDENTIFIER(x)
TOK_PLUS(+)
TOK_IDENTIFIER(i)
TOK_SEMICOLON(;)
TOK_RBRACE(})
TOK_IDENTIFIER(printValues)
TOK_LPAREN(()
TOK_IDENTIFIER(x)
TOK_COMMA(,)
TOK_IDENTIFIER(y)
TOK_RPAREN())
TOK_SEMICOLON(;)
TOK_RETURN(return)
TOK_INT_LITERAL(0)
TOK_SEMICOLON(;)
TOK_RBRACE(})
TOK_VOID(void)
TOK_IDENTIFIER(printValues)
TOK_LPAREN(()
TOK_INT(int)
TOK_IDENTIFIER(a)
TOK_COMMA(,)
TOK_FLOAT(float)
TOK_IDENTIFIER(b)
TOK_RPAREN())
TOK_LBRACE({)
TOK_IDENTIFIER(printf)
TOK_LPAREN(()
TOK_IDENTIFIER("x = %d, y = %f\n")
TOK_COMMA(,)
TOK_IDENTIFIER(a)
TOK_COMMA(,)
TOK_IDENTIFIER(b)
TOK_RPAREN())
TOK_SEMICOLON(;)
TOK_RBRACE(})

```

This means your lexer correctly tokenized the C source code into tokens like `TOK_INT`, `TOK_IDENTIFIER`, `TOK_ASSIGN`, etc. üéâ

---

## üßπ Clean Up (Optional)

```bash
make clean
```

This will delete the compiled executable and the generated `lexer.c`.

---

Would you like me to:
- Add token **names with matched text** for clarity (e.g., `TOK_IDENTIFIER(x)`)?
- Or move to parser implementation next?
